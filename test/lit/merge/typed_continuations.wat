;; NOTE: Assertions have been generated by update_lit_checks.py and should not be edited.
;; RUN: wasm-merge %s first %s.second second -all -S -o - | filecheck %s

;; Test that we can suspend to an imported tag and duplicate continuation types
;; get canonicalized across modules.

;; FIXME: assembling the resulting file to wasm crashes, even though it looks
;; correct. Unrelated bug?

(module
 ;; CHECK:      (type $ft2 (func (param i32) (result i32)))

 ;; CHECK:      (type $ct2 (cont $ft2))

 ;; CHECK:      (type $ft1 (func (result i32)))
 (type $ft1 (func             (result i32)))
 (type $ft2 (func (param i32) (result i32)))
 ;; CHECK:      (type $ct1 (cont $ft1))
 (type $ct1 (cont $ft1))
 (type $ct2 (cont $ft2))

 (import "second" "second" (tag $t2 (param (ref $ct1)) (result i32)))
 (import "second" "f2" (func $f2 (param $x i32) (result i32)))

 ;; CHECK:      (elem declare func $f2_2)

 ;; CHECK:      (tag $t1 (param i32) (result i32))
 (tag $t1 (export "t1") (param i32) (result i32 ))

 (elem declare func $f2)


 ;; CHECK:      (func $f1 (type $4) (result i32 (ref $ct2))
 ;; CHECK-NEXT:  (block $handle_t1 (type $4) (result i32 (ref $ct2))
 ;; CHECK-NEXT:   (tuple.drop 2
 ;; CHECK-NEXT:    (block $handle_t2 (type $5) (result (ref $ct1) (ref $ct2))
 ;; CHECK-NEXT:     (drop
 ;; CHECK-NEXT:      (resume $ct1 (tag $t1 $handle_t1) (tag $second $handle_t2)
 ;; CHECK-NEXT:       (cont.bind $ct2 $ct1
 ;; CHECK-NEXT:        (i32.const 100)
 ;; CHECK-NEXT:        (cont.new $ct2
 ;; CHECK-NEXT:         (ref.func $f2_2)
 ;; CHECK-NEXT:        )
 ;; CHECK-NEXT:       )
 ;; CHECK-NEXT:      )
 ;; CHECK-NEXT:     )
 ;; CHECK-NEXT:     (unreachable)
 ;; CHECK-NEXT:    )
 ;; CHECK-NEXT:   )
 ;; CHECK-NEXT:   (unreachable)
 ;; CHECK-NEXT:  )
 ;; CHECK-NEXT: )
 (func $f1 (export "f1") (result i32 (ref $ct2))
  (block $handle_t1 (result i32 (ref $ct2))
   (tuple.drop 2
    (block $handle_t2 (result (ref $ct1) (ref $ct2))
     (drop (resume $ct1 (tag $t1 $handle_t1) (tag $t2 $handle_t2)
             (cont.bind $ct2 $ct1 (i32.const 100) (cont.new $ct2 (ref.func $f2)))))
     ;; We never run $f2 to completion
     (unreachable)
    ) ;; end of $handle_t2
   ) ;; end tuple.drop
   ;; $f2 never suspends to $t2
   (unreachable)
  )
 )

)
